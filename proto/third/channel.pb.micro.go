// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/third/channel.proto

package third

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ChannelService service

type ChannelService interface {
	AddOne(ctx context.Context, in *ReqChannelAdd, opts ...client.CallOption) (*ReplyChannelInfo, error)
	UpdateOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyChannelInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyChannelInfo, error)
	GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyChannelList, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyChannelList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
}

type channelService struct {
	c    client.Client
	name string
}

func NewChannelService(name string, c client.Client) ChannelService {
	return &channelService{
		c:    c,
		name: name,
	}
}

func (c *channelService) AddOne(ctx context.Context, in *ReqChannelAdd, opts ...client.CallOption) (*ReplyChannelInfo, error) {
	req := c.c.NewRequest(c.name, "ChannelService.AddOne", in)
	out := new(ReplyChannelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) UpdateOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyChannelInfo, error) {
	req := c.c.NewRequest(c.name, "ChannelService.UpdateOne", in)
	out := new(ReplyChannelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyChannelInfo, error) {
	req := c.c.NewRequest(c.name, "ChannelService.GetOne", in)
	out := new(ReplyChannelInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) GetList(ctx context.Context, in *RequestPage, opts ...client.CallOption) (*ReplyChannelList, error) {
	req := c.c.NewRequest(c.name, "ChannelService.GetList", in)
	out := new(ReplyChannelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ChannelService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyChannelList, error) {
	req := c.c.NewRequest(c.name, "ChannelService.GetByFilter", in)
	out := new(ReplyChannelList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ChannelService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ChannelService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelService service

type ChannelServiceHandler interface {
	AddOne(context.Context, *ReqChannelAdd, *ReplyChannelInfo) error
	UpdateOne(context.Context, *RequestInfo, *ReplyChannelInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyChannelInfo) error
	GetList(context.Context, *RequestPage, *ReplyChannelList) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyChannelList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
}

func RegisterChannelServiceHandler(s server.Server, hdlr ChannelServiceHandler, opts ...server.HandlerOption) error {
	type channelService interface {
		AddOne(ctx context.Context, in *ReqChannelAdd, out *ReplyChannelInfo) error
		UpdateOne(ctx context.Context, in *RequestInfo, out *ReplyChannelInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyChannelInfo) error
		GetList(ctx context.Context, in *RequestPage, out *ReplyChannelList) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyChannelList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
	}
	type ChannelService struct {
		channelService
	}
	h := &channelServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChannelService{h}, opts...))
}

type channelServiceHandler struct {
	ChannelServiceHandler
}

func (h *channelServiceHandler) AddOne(ctx context.Context, in *ReqChannelAdd, out *ReplyChannelInfo) error {
	return h.ChannelServiceHandler.AddOne(ctx, in, out)
}

func (h *channelServiceHandler) UpdateOne(ctx context.Context, in *RequestInfo, out *ReplyChannelInfo) error {
	return h.ChannelServiceHandler.UpdateOne(ctx, in, out)
}

func (h *channelServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyChannelInfo) error {
	return h.ChannelServiceHandler.GetOne(ctx, in, out)
}

func (h *channelServiceHandler) GetList(ctx context.Context, in *RequestPage, out *ReplyChannelList) error {
	return h.ChannelServiceHandler.GetList(ctx, in, out)
}

func (h *channelServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ChannelServiceHandler.RemoveOne(ctx, in, out)
}

func (h *channelServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyChannelList) error {
	return h.ChannelServiceHandler.GetByFilter(ctx, in, out)
}

func (h *channelServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ChannelServiceHandler.GetStatistic(ctx, in, out)
}

func (h *channelServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.ChannelServiceHandler.UpdateByFilter(ctx, in, out)
}
