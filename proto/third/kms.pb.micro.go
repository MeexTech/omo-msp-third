// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/third/kms.proto

package third

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for KMSService service

type KMSService interface {
	AddOne(ctx context.Context, in *ReqKMSAdd, opts ...client.CallOption) (*ReplyKMSInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyKMSInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyKMSList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	Remove(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type kMSService struct {
	c    client.Client
	name string
}

func NewKMSService(name string, c client.Client) KMSService {
	return &kMSService{
		c:    c,
		name: name,
	}
}

func (c *kMSService) AddOne(ctx context.Context, in *ReqKMSAdd, opts ...client.CallOption) (*ReplyKMSInfo, error) {
	req := c.c.NewRequest(c.name, "KMSService.AddOne", in)
	out := new(ReplyKMSInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyKMSInfo, error) {
	req := c.c.NewRequest(c.name, "KMSService.GetOne", in)
	out := new(ReplyKMSInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyKMSList, error) {
	req := c.c.NewRequest(c.name, "KMSService.GetByFilter", in)
	out := new(ReplyKMSList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "KMSService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSService) Remove(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "KMSService.Remove", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KMSService service

type KMSServiceHandler interface {
	AddOne(context.Context, *ReqKMSAdd, *ReplyKMSInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyKMSInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyKMSList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	Remove(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterKMSServiceHandler(s server.Server, hdlr KMSServiceHandler, opts ...server.HandlerOption) error {
	type kMSService interface {
		AddOne(ctx context.Context, in *ReqKMSAdd, out *ReplyKMSInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyKMSInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyKMSList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		Remove(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type KMSService struct {
		kMSService
	}
	h := &kMSServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&KMSService{h}, opts...))
}

type kMSServiceHandler struct {
	KMSServiceHandler
}

func (h *kMSServiceHandler) AddOne(ctx context.Context, in *ReqKMSAdd, out *ReplyKMSInfo) error {
	return h.KMSServiceHandler.AddOne(ctx, in, out)
}

func (h *kMSServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyKMSInfo) error {
	return h.KMSServiceHandler.GetOne(ctx, in, out)
}

func (h *kMSServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyKMSList) error {
	return h.KMSServiceHandler.GetByFilter(ctx, in, out)
}

func (h *kMSServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.KMSServiceHandler.GetStatistic(ctx, in, out)
}

func (h *kMSServiceHandler) Remove(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.KMSServiceHandler.Remove(ctx, in, out)
}
