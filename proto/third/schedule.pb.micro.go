// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/third/schedule.proto

package third

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ScheduleService service

type ScheduleService interface {
	AddOne(ctx context.Context, in *ReqScheduleAdd, opts ...client.CallOption) (*ReplyScheduleInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyScheduleInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyScheduleList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type scheduleService struct {
	c    client.Client
	name string
}

func NewScheduleService(name string, c client.Client) ScheduleService {
	return &scheduleService{
		c:    c,
		name: name,
	}
}

func (c *scheduleService) AddOne(ctx context.Context, in *ReqScheduleAdd, opts ...client.CallOption) (*ReplyScheduleInfo, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.AddOne", in)
	out := new(ReplyScheduleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyScheduleInfo, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.GetOne", in)
	out := new(ReplyScheduleInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyScheduleList, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.GetByFilter", in)
	out := new(ReplyScheduleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScheduleService service

type ScheduleServiceHandler interface {
	AddOne(context.Context, *ReqScheduleAdd, *ReplyScheduleInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyScheduleInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyScheduleList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterScheduleServiceHandler(s server.Server, hdlr ScheduleServiceHandler, opts ...server.HandlerOption) error {
	type scheduleService interface {
		AddOne(ctx context.Context, in *ReqScheduleAdd, out *ReplyScheduleInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyScheduleInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyScheduleList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type ScheduleService struct {
		scheduleService
	}
	h := &scheduleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ScheduleService{h}, opts...))
}

type scheduleServiceHandler struct {
	ScheduleServiceHandler
}

func (h *scheduleServiceHandler) AddOne(ctx context.Context, in *ReqScheduleAdd, out *ReplyScheduleInfo) error {
	return h.ScheduleServiceHandler.AddOne(ctx, in, out)
}

func (h *scheduleServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyScheduleInfo) error {
	return h.ScheduleServiceHandler.GetOne(ctx, in, out)
}

func (h *scheduleServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyScheduleList) error {
	return h.ScheduleServiceHandler.GetByFilter(ctx, in, out)
}

func (h *scheduleServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.ScheduleServiceHandler.GetStatistic(ctx, in, out)
}

func (h *scheduleServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.ScheduleServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *scheduleServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.ScheduleServiceHandler.RemoveOne(ctx, in, out)
}
