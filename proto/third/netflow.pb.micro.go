// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/third/netflow.proto

package third

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NetflowService service

type NetflowService interface {
	AddOne(ctx context.Context, in *ReqNetflowAdd, opts ...client.CallOption) (*ReplyNetflowInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyNetflowInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyNetflowList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type netflowService struct {
	c    client.Client
	name string
}

func NewNetflowService(name string, c client.Client) NetflowService {
	return &netflowService{
		c:    c,
		name: name,
	}
}

func (c *netflowService) AddOne(ctx context.Context, in *ReqNetflowAdd, opts ...client.CallOption) (*ReplyNetflowInfo, error) {
	req := c.c.NewRequest(c.name, "NetflowService.AddOne", in)
	out := new(ReplyNetflowInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netflowService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyNetflowInfo, error) {
	req := c.c.NewRequest(c.name, "NetflowService.GetOne", in)
	out := new(ReplyNetflowInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netflowService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyNetflowList, error) {
	req := c.c.NewRequest(c.name, "NetflowService.GetByFilter", in)
	out := new(ReplyNetflowList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netflowService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "NetflowService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netflowService) UpdateByFilter(ctx context.Context, in *RequestUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "NetflowService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netflowService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "NetflowService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetflowService service

type NetflowServiceHandler interface {
	AddOne(context.Context, *ReqNetflowAdd, *ReplyNetflowInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyNetflowInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyNetflowList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *RequestUpdate, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterNetflowServiceHandler(s server.Server, hdlr NetflowServiceHandler, opts ...server.HandlerOption) error {
	type netflowService interface {
		AddOne(ctx context.Context, in *ReqNetflowAdd, out *ReplyNetflowInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyNetflowInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyNetflowList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type NetflowService struct {
		netflowService
	}
	h := &netflowServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NetflowService{h}, opts...))
}

type netflowServiceHandler struct {
	NetflowServiceHandler
}

func (h *netflowServiceHandler) AddOne(ctx context.Context, in *ReqNetflowAdd, out *ReplyNetflowInfo) error {
	return h.NetflowServiceHandler.AddOne(ctx, in, out)
}

func (h *netflowServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyNetflowInfo) error {
	return h.NetflowServiceHandler.GetOne(ctx, in, out)
}

func (h *netflowServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyNetflowList) error {
	return h.NetflowServiceHandler.GetByFilter(ctx, in, out)
}

func (h *netflowServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.NetflowServiceHandler.GetStatistic(ctx, in, out)
}

func (h *netflowServiceHandler) UpdateByFilter(ctx context.Context, in *RequestUpdate, out *ReplyInfo) error {
	return h.NetflowServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *netflowServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.NetflowServiceHandler.RemoveOne(ctx, in, out)
}
